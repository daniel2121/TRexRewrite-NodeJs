grammar RuleDefinition;

tesla: event_ids? from where? emit consuming?;

event_ids: 'EventTypes' definition (',' definition)* ';' ;
definition: CAPITAL_IDENTIFIER '=' float_t;
from: 'from' predicate_body predicates;
predicates: ('and' predicate)*;
predicate: event;
where: 'where' filters;
filters: expression filters_tail;
filters_tail: 'and' expression filters_tail;
emit: 'emit' (CAPITAL_IDENTIFIER | LOWER_IDENTIFIER | IMMEDIATE) evaluations;
evaluations: '(' evaluation (',' evaluation)* ')';
evaluation: expression;
consuming: 'consuming' CAPITAL_IDENTIFIER CAPITAL_IDENTIFIER;
predicate_body: (CAPITAL_IDENTIFIER | LOWER_IDENTIFIER | IMMEDIATE) assignments constraints alias;
assignments: '[' assignment (',' assignment)* ']';
assignment: parameter '=' parameter;
constraints: '(' expression (',' expression)* ')' | '(' ')';
constraints_tail: ',' expression constraints_tail;
alias: 'as' (CAPITAL_IDENTIFIER | LOWER_IDENTIFIER);
event: event_selection predicate_body timing;
event_selection: 'each' | 'not' | 'first' | 'last';
aggregate: aggregate_assignment aggregate_body;
aggregate_assignment: parameter '=';
aggregate_body: aggregator '(' constrained_tuple aggregate_timing')';
aggregator: 'AVG' | 'SUM' | 'MAX' | 'MIN' | 'COUNT';
constrained_tuple: CAPITAL_IDENTIFIER '(' constraints ')' attribute_selection;
aggregate_timing: timing;
attribute_selection: '.' LOWER_IDENTIFIER;
static_t: unordered_static | ordered_static;
unordered_static: unordered_selection predicate_body;
unordered_selection: 'each' | 'not';
ordered_static: ordered_selection predicate_body ordered_by;
ordered_selection: 'first' | 'last';
ordered_by: 'ordered by' ordering orderings;
ordering: LOWER_IDENTIFIER order;
orderings: ',' ordering orderings;
order: 'asc' | 'desc';
timing: within | between;
within: 'within' time 'from' (CAPITAL_IDENTIFIER | LOWER_IDENTIFIER);
between: 'between' CAPITAL_IDENTIFIER 'and' CAPITAL_IDENTIFIER;
time: float_t time_unit;
time_unit: 'd' | 'h' | 'min' | 's' | 'ms' | 'us';
expression: parameter operator parameter | parameter operator IMMEDIATE ;
operator: '=' | '==' | '>' | '<' ;
parenthesization: '(' expression ')';
operation: binary_operation | unary_operation;
binary_operation: BINARY_OPERATOR;
unary_operation: UNARY_OPERATOR expression;
BINARY_OPERATOR: '+' | '*';
UNARY_OPERATOR: '++' | '--' | '==' | '>' | '<';
atom: identifier | parameter | IMMEDIATE;
identifier: qualifier LOWER_IDENTIFIER;
qualifier: CAPITAL_IDENTIFIER '.';
CAPITAL_IDENTIFIER: [A-Z]+ ;
LOWER_IDENTIFIER: [a-z]+ ;
parameter: LOWER_IDENTIFIER | IMMEDIATE;
capital_identifiers: ',' capital_identifiers;
lower_identifiers: ',' LOWER_IDENTIFIER lower_identifiers;
IMMEDIATE: [0-9]+ ;
float_t: IMMEDIATE ;
WS : [ \t\r\n]+ -> skip ;
